# Generated by Django 5.0.3 on 2024-03-27 23:50

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('adminId', models.AutoField(primary_key=True, serialize=False)),
                ('adminName', models.CharField(max_length=20)),
                ('adminEmail', models.EmailField(max_length=254)),
                ('adminPassword', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Arena',
            fields=[
                ('arenaId', models.CharField(max_length=5, primary_key=True, serialize=False)),
                ('arenaName', models.CharField(max_length=50)),
                ('arenaCapacity', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Figure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('figureName', models.CharField(max_length=100, unique=True)),
                ('figureGenre', models.CharField(max_length=100)),
                ('figurePicture', models.ImageField(blank=True, null=True, upload_to='figure_images/')),
                ('carouselImage', models.ImageField(blank=True, null=True, upload_to='carousel_images/')),
                ('figureAbout', models.CharField(blank=True, max_length=2000)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('userId', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('userPhoneNumber', models.CharField(blank=True, max_length=10)),
                ('userAddress', models.CharField(blank=True, max_length=100)),
                ('isOrganiser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('eventName', models.CharField(max_length=100)),
                ('eventDate', models.DateField()),
                ('eventTime', models.TimeField(default='12:00')),
                ('eventId', models.AutoField(primary_key=True, serialize=False)),
                ('eventLocation', models.CharField(max_length=100)),
                ('eventDescription', models.CharField(max_length=250)),
                ('eventStatus', models.CharField(max_length=10)),
                ('eventGenre', models.CharField(default='none', max_length=100)),
                ('eventImage', models.ImageField(blank=True, null=True, upload_to='event_images/')),
                ('arenaId', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tixx.arena')),
                ('figureId', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tixx.figure')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('paymentId', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('paymentAmount', models.FloatField()),
                ('paymentMethod', models.CharField(max_length=10)),
                ('paymentDate', models.DateField()),
                ('transactionId', models.CharField(max_length=10)),
                ('userId', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('reviewId', models.AutoField(primary_key=True, serialize=False)),
                ('reviewRating', models.DecimalField(decimal_places=1, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('reviewTitle', models.CharField(max_length=100)),
                ('reviewText', models.CharField(max_length=500)),
                ('reviewDate', models.DateField()),
                ('reviewFigure', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='tixx.figure')),
            ],
        ),
        migrations.CreateModel(
            name='ReviewImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reviewImage', models.ImageField(blank=True, null=True, upload_to='review_images/')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tixx.review')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('ticketId', models.AutoField(primary_key=True, serialize=False)),
                ('seatNum', models.CharField(max_length=5)),
                ('ticketQR', models.CharField(max_length=250)),
                ('ticketPrice', models.IntegerField()),
                ('ticketType', models.CharField(max_length=10)),
                ('zone', models.IntegerField(default=1)),
                ('available', models.BooleanField(default=True)),
                ('arenaId', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tixx.arena')),
                ('eventId', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tixx.event')),
            ],
        ),
        migrations.CreateModel(
            name='Seat',
            fields=[
                ('seatId', models.AutoField(primary_key=True, serialize=False)),
                ('seatNumber', models.IntegerField()),
                ('arenaId', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tixx.arena')),
                ('ticketId', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tixx.ticket')),
            ],
        ),
    ]
